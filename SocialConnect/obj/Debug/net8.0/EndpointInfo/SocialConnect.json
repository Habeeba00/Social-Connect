{
  "openapi": "3.0.1",
  "info": {
    "title": "SocialConnect API",
    "description": "API for managing the SocialConnect application.",
    "contact": {
      "name": "Habiba Mohamed",
      "email": "habiibamohamed259@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Posts/{PostId}/comments": {
      "get": {
        "tags": [
          "Comment"
        ],
        "summary": "Retrieve users who commented a post",
        "description": "",
        "parameters": [
          {
            "name": "PostId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of users who commented the post",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisplayCommentDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisplayCommentDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisplayCommentDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Post not found"
          }
        }
      },
      "post": {
        "tags": [
          "Comment"
        ],
        "summary": " Add comments on a post",
        "description": "This endpoint allows a user to Comment on a post. ",
        "operationId": "AddComment",
        "parameters": [
          {
            "name": "PostId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCommentDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCommentDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddCommentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If the comment was successfully added."
          },
          "400": {
            "description": "If the request contains invalid data."
          },
          "401": {
            "description": "If the user is not authenticated."
          },
          "404": {
            "description": "If the post was not found."
          }
        }
      }
    },
    "/api/Posts/{PostId}": {
      "delete": {
        "tags": [
          "Comment"
        ],
        "summary": "Remove a comment from a post",
        "description": "This endpoint removes a comment from a specific post. The comment can be removed by its owner or an admin.",
        "parameters": [
          {
            "name": "PostId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment removed successfully",
            "content": {
              "text/plain": {
                "schema": { }
              },
              "application/json": {
                "schema": { }
              },
              "text/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Post not found"
          },
          "400": {
            "description": "Comment not found"
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User is not authorized to delete this comment"
          }
        }
      }
    },
    "/api/User/{UserId}/follow": {
      "post": {
        "tags": [
          "Follow"
        ],
        "summary": "Add a follower to a user",
        "description": "Allows a user to follow another user.",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Follow added successfully."
          },
          "400": {
            "description": "Bad request, You are already following this user."
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Follow"
        ],
        "summary": "Unfollow a user",
        "description": "Allows a user to unfollow another user.",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unfollowed successfully."
          },
          "400": {
            "description": "Bad request, You cannot unfollow yourself."
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Follow relationship not found"
          }
        }
      }
    },
    "/api/Post/{PostId}/likes": {
      "get": {
        "tags": [
          "Like"
        ],
        "summary": "Retrieve users who liked a post",
        "description": "",
        "parameters": [
          {
            "name": "PostId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of users who liked the post",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisplayLikeDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisplayLikeDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisplayLikeDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Post not found"
          }
        }
      }
    },
    "/api/Post/{PostId}/like": {
      "post": {
        "tags": [
          "Like"
        ],
        "summary": "Like or Unlike a post",
        "description": "This endpoint allows a user to like or unlike a post. If the user has already liked the post, the like will be removed. If the user hasn't liked the post yet, the like will be added.",
        "operationId": "AddLikeOrRemoveLike",
        "parameters": [
          {
            "name": "PostId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the like was successfully added or removed."
          },
          "400": {
            "description": "If the request contains invalid data."
          },
          "401": {
            "description": "If the user is not authenticated."
          },
          "404": {
            "description": "If the post was not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Like"
        ],
        "summary": "Remove a like from a post",
        "description": "This endpoint removes a like from a specific post.",
        "parameters": [
          {
            "name": "PostId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Like removed successfully",
            "content": {
              "text/plain": {
                "schema": { }
              },
              "application/json": {
                "schema": { }
              },
              "text/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Post not found"
          },
          "400": {
            "description": "Like not found"
          },
          "401": {
            "description": "User not authenticated"
          }
        }
      }
    },
    "/api/Post": {
      "get": {
        "tags": [
          "Post"
        ],
        "summary": "Get all posts ",
        "description": "",
        "responses": {
          "200": {
            "description": "Return all posts",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisplayPostDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisplayPostDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisplayPostDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Post"
        ],
        "summary": "Craete posts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPostDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPostDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddPostDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "If posts created successfully"
          },
          "400": {
            "description": "If invalid posts data"
          }
        }
      }
    },
    "/api/Post/{id}": {
      "get": {
        "tags": [
          "Post"
        ],
        "summary": "Get a post by ID",
        "description": "Fetches a post by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayPostDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayPostDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayPostDTO"
                }
              }
            }
          },
          "404": {
            "description": "Post not found"
          }
        }
      },
      "put": {
        "tags": [
          "Post"
        ],
        "summary": "Edit an existing post",
        "description": "Edits the details of a post by its unique ID. Only the user who created the post can edit it.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post updated successfully"
          },
          "404": {
            "description": "Post not found"
          },
          "403": {
            "description": "User is not authorized to edit this post"
          }
        }
      },
      "delete": {
        "tags": [
          "Post"
        ],
        "summary": "Delete a post by ID",
        "description": "Deletes a post by its unique ID. Only the user who created the post can delete it.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post deleted successfully"
          },
          "404": {
            "description": "Post not found"
          },
          "403": {
            "description": "User is not authorized to delete this post"
          }
        }
      }
    },
    "/api/Profile/allUsers": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get all users",
        "description": "",
        "responses": {
          "200": {
            "description": "Return all users",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisplayProfileDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisplayProfileDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisplayProfileDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Profile/{id}": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Can search on user by user id ",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return user data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayProfileDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayProfileDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayProfileDTO"
                }
              }
            }
          },
          "404": {
            "description": "If no user founded"
          }
        }
      }
    },
    "/api/Profile/Create": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Create User Profile",
        "description": "Creates a new user profile, uploads a profile picture, and returns the profile details.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddProfileDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddProfileDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddProfileDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Profile created successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayProfileDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayProfileDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayProfileDTO"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user data."
          },
          "401": {
            "description": "User not authenticated."
          },
          "409": {
            "description": "User profile already exists."
          }
        }
      }
    },
    "/api/Profile/Update": {
      "put": {
        "tags": [
          "Profile"
        ],
        "summary": "Update User Profile",
        "description": "Updates an existing user profile. If the data provided is partial, it will only update the given fields.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayProfileDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayProfileDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayProfileDTO"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user data."
          },
          "401": {
            "description": "User not authenticated."
          },
          "404": {
            "description": "User profile not found."
          }
        }
      }
    },
    "/api/User/Register": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Registers a new user.",
        "description": "Registers a new user with the provided details.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponseDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponseDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or validation errors"
          }
        }
      }
    },
    "/api/User/Login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Logs in a user and returns a JWT token.",
        "description": "Authenticates the user with the provided username and password and returns a JWT token if successful.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JWT token returned successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username or password"
          }
        }
      }
    },
    "/api/User/ChangePassword": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Changes the password of a user.",
        "description": "Changes the password of the user identified by the given ID, using the provided old and new passwords.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully"
          },
          "400": {
            "description": "Invalid request or validation errors"
          },
          "401": {
            "description": "Unauthorized if the user is not authenticated"
          }
        }
      }
    },
    "/api/User/Logout": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Logs out the user.",
        "description": "Signs out the user and invalidates their authentication.",
        "responses": {
          "200": {
            "description": "User logged out successfully"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddCommentDTO": {
        "required": [
          "commentContent"
        ],
        "type": "object",
        "properties": {
          "commentContent": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AddPostDTO": {
        "required": [
          "content",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 100,
            "minLength": 5,
            "type": "string"
          },
          "content": {
            "maxLength": 1000,
            "minLength": 10,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AddProfileDTO": {
        "required": [
          "address",
          "bio",
          "dateOfBirth",
          "education",
          "phoneNumber",
          "relationship"
        ],
        "type": "object",
        "properties": {
          "bio": {
            "maxLength": 500,
            "minLength": 3,
            "type": "string"
          },
          "phoneNumber": {
            "maxLength": 15,
            "minLength": 10,
            "type": "string",
            "format": "tel"
          },
          "address": {
            "maxLength": 200,
            "minLength": 5,
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "picture": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "relationship": {
            "maxLength": 50,
            "minLength": 3,
            "type": "string"
          },
          "education": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string"
          },
          "gender": {
            "pattern": "Male|Female|Other",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordDTO": {
        "required": [
          "confirmPassword",
          "newPassword",
          "oldPassword",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 50,
            "minLength": 5,
            "type": "string"
          },
          "oldPassword": {
            "maxLength": 100,
            "minLength": 6,
            "type": "string"
          },
          "newPassword": {
            "maxLength": 100,
            "minLength": 6,
            "type": "string"
          },
          "confirmPassword": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DisplayCommentDTO": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "commentContent": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DisplayFollowerDTO": {
        "type": "object",
        "properties": {
          "followerName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DisplayFollowingDTO": {
        "type": "object",
        "properties": {
          "followedUserName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DisplayLikeDTO": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DisplayPostDTO": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "postId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "likesCount": {
            "type": "integer",
            "format": "int32"
          },
          "commentsCount": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "likes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayLikeDTO"
            },
            "nullable": true
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayCommentDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DisplayProfileDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "picture": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "relationship": {
            "type": "string",
            "nullable": true
          },
          "education": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "followersCount": {
            "type": "integer",
            "format": "int32"
          },
          "followingCount": {
            "type": "integer",
            "format": "int32"
          },
          "followers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayFollowerDTO"
            },
            "nullable": true
          },
          "following": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayFollowingDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginDTO": {
        "required": [
          "confirmPassword",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 50,
            "minLength": 4,
            "type": "string"
          },
          "password": {
            "maxLength": 100,
            "minLength": 6,
            "type": "string"
          },
          "confirmPassword": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RegisterDTO": {
        "required": [
          "email",
          "fullName",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 50,
            "minLength": 4,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "maxLength": 100,
            "minLength": 6,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,}$",
            "type": "string"
          },
          "fullName": {
            "maxLength": 100,
            "minLength": 8,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RegisterResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePostDTO": {
        "required": [
          "content",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 100,
            "minLength": 5,
            "type": "string"
          },
          "content": {
            "maxLength": 1000,
            "minLength": 10,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateProfileDTO": {
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 50,
            "minLength": 3,
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "bio": {
            "maxLength": 500,
            "minLength": 5,
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 15,
            "minLength": 10,
            "type": "string",
            "format": "tel",
            "nullable": true
          },
          "address": {
            "maxLength": 200,
            "minLength": 5,
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "picture": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "relationship": {
            "maxLength": 50,
            "minLength": 3,
            "type": "string",
            "nullable": true
          },
          "education": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string",
            "nullable": true
          },
          "gender": {
            "pattern": "Male|Female|Other",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}